workflows:
  unity-ios-release-publish:
    name: Unity iOS Release + Publish
    instance_type: mac_mini_m2
    max_build_duration: 120

    environment:
      vars:
        UNITY_VERSION: 6000.0.47f1
        UNITY_CHANGESET: 2ad1ed33fd3b
        BUILD_SCRIPT: BuildiOS
        UNITY_IOS_DIR: "iOSBuild"
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        PROJECT_PATH: "StapeTowerDefenceTD"
      groups:
        - unity_credentials
        - app_store_credentials

    scripts:
      - name: üîÅ Full Clean: Unity caches & project Library
        script: |
          echo "üßπ Cleaning Unity global & project caches..."
          rm -rf "$HOME/.cache/unity3d"
          rm -rf "$HOME/.config/unity3d"
          rm -rf "$HOME/.local/share/unity3d"
          rm -rf "$CM_BUILD_DIR/$PROJECT_PATH/Library"
          rm -rf "$CM_BUILD_DIR/$PROJECT_PATH/Temp"
          rm -rf "$CM_BUILD_DIR/$PROJECT_PATH/obj"
          rm -rf "$CM_BUILD_DIR/$PROJECT_PATH/Packages/PackageCache"
          echo "‚úÖ Clean complete"

      - name: üîç Log installed packages before build
        script: |
          echo "üì¶ Installed Unity packages:"
          cat "$CM_BUILD_DIR/$PROJECT_PATH/Packages/manifest.json" || echo "manifest.json not found"
          echo "---"
          echo "üìÅ Contents of PackageCache:"
          ls -la "$CM_BUILD_DIR/$PROJECT_PATH/Library/PackageCache" || echo "No PackageCache found"

      - name: Install Unity via Headless Hub
        script: |
          echo "üîß Installing Unity $UNITY_VERSION via Headless Hub"
          yes Y | /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub \
            -- --headless install --version $UNITY_VERSION --changeset $UNITY_CHANGESET -a arm64
          yes Y | /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub \
            -- --headless install-modules --version $UNITY_VERSION -m ios -a arm64

          UNITY_BIN="/Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity"
          if [ ! -f "$UNITY_BIN" ]; then
            echo "‚ùå Unity not found at $UNITY_BIN"
            exit 1
          fi
          echo "‚úÖ Unity installed at $UNITY_BIN"
          echo "UNITY_BIN=$UNITY_BIN" >> $CM_ENV

      - name: Activate Unity License
        script: |
          echo "üîê Activating Unity license..."
          "$UNITY_BIN" -batchmode -quit \
            -serial "${UNITY_SERIAL?}" \
            -username "${UNITY_EMAIL?}" \
            -password "${UNITY_PASSWORD?}" \
            -logFile /tmp/unity_activation.log || true

          echo "üìù Activation log:"
          cat /tmp/unity_activation.log

          if grep -q "Successfully activated" /tmp/unity_activation.log || \
             grep -q "Entitlement license activated" /tmp/unity_activation.log || \
             grep -q "ULF license" /tmp/unity_activation.log; then
            echo "‚úÖ License activated"
          else
            echo "‚ùå License activation failed"
            exit 1
          fi

      - name: Generate Xcode Project
        script: |
          echo "üöß Generating Xcode project..."
          PROJECT_FULL_PATH="$CM_BUILD_DIR/$PROJECT_PATH"

          "$UNITY_BIN" -batchmode -quit \
            -projectPath "$PROJECT_FULL_PATH" \
            -executeMethod BuildScript.$BUILD_SCRIPT \
            -logFile /tmp/unity_build.log

          cat /tmp/unity_build.log

          if grep -q "Build succeeded" /tmp/unity_build.log; then
            echo "‚úÖ Unity build succeeded"
          else
            echo "‚ùå Unity build failed"
            exit 1
          fi

      - name: Build IPA (App Store signing)
        script: |
          IOS_DIR="$CM_BUILD_DIR/$PROJECT_PATH/$UNITY_IOS_DIR"
          cd "$IOS_DIR"

          echo "üìÅ Checking for Xcode project..."
          if [ ! -d "$XCODE_PROJECT" ]; then
            echo "‚ùå Xcode project not found: $XCODE_PROJECT"
            exit 1
          fi

          echo "üßæ Creating export_options.plist for App Store..."
          cat <<EOF > export_options.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>uploadBitcode</key>
            <true/>
            <key>compileBitcode</key>
            <true/>
            <key>destination</key>
            <string>export</string>
          </dict>
          </plist>
          EOF

          echo "üì¶ Building .ipa file for App Store..."
          xcode-project build-ipa \
            --project "$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME" \
            --export-options-plist export_options.plist

          IPA_PATH="$(find . -name '*.ipa' | head -n 1)"
          if [ -f "$IPA_PATH" ]; then
            echo "‚úÖ IPA created: $IPA_PATH"
          else
            echo "‚ùå IPA not created"
            exit 1
          fi

      - name: Upload to App Store
        script: |
          echo "üöÄ Uploading .ipa to App Store..."
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
            --verbose

      - name: Return Unity License
        script: |
          echo "‚ôªÔ∏è Returning Unity license..."
          "$UNITY_BIN" -batchmode -quit -returnlicense || true
          echo "üîì License returned"

    artifacts:
      - "**/*.ipa"
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
